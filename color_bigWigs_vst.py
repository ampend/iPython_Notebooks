#!/usr/bin/env python
#import fileinput

import sys
#import genutils
import numpy as np
from optparse import  OptionParser

###############################################################################
USAGE = """
python color_bigWigs_vst.py	--infile < input sorted bed file for generating bigWig file > 
						--raw <T (if it is from a window) or F (per site analysis) >
						--out < Output file stem name >

infile == input sorted bed file for generating bigWig file
raw == True (T) or False (F) if the results are raw (True) or Z-transformed (False) 
out == Output file stem name
"""

parser = OptionParser(USAGE)
parser.add_option('--infile',dest='infile', help = 'input file is the output .txt file generated by R to calculate')
parser.add_option('--out',dest='out', help = 'Output file stem name (e.g. dog_wolf_54callset_Xnonpar)')
parser.add_option('--raw',dest='raw', help = 'True (T) or False (F) if the results are raw (True) or Z-transformed (False) ')

(options, args) = parser.parse_args()

parser = OptionParser(USAGE)
if options.infile is None:
	parser.error('input file name not given')
if options.out is None:
	parser.error('Output file stem name not given')
if options.raw is None:
	parser.error('No specification of True or False for raw Vst values given')
############################################################################
def make_track_file_perWindow(line):
	#http://guest:kiddlab@kiddlabshare.umms.med.umich.edu/shared-data/hub/angela-hub.txt
	trackFile = open(out + '.tracks.txt', 'w')

	if 'T' in options.raw: #If these are not transformed VST data
		trackFile.write('track VST_Values_54Dogs_NoMxb\n')
		trackFile.write('type bigWig\n')
		trackFile.write('container multiWig\n')
		trackFile.write('shortLabel VST_Values\n')
		trackFile.write('longLabel VST_Values_54Dogs_NoMxb\n')
		trackFile.write('aggregate transparentOverlay\n')
		trackFile.write('showSubtrackColoronUi on\n')
		trackFile.write('maxHeightPixels 500:100:8\n')
		trackFile.write('browser full all\n')
		trackFile.write('viewLimits -0.1:1\n')
		trackFile.write('yLineMark 0.0\n')
		trackFile.write('yLineOnOff on\n\n')

		trackFile.write('\ttrack VST_Values_54Dogs_NoMxb_grey\n')
		trackFile.write('\tparent VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_grey.bw\n' % out)
		trackFile.write('\tshortLabel VST_Values_grey\n')
		trackFile.write('\tlongLabel VST_Values_54Dogs_NoMxb_grey\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 142,142,142\n\n')
	
		trackFile.write('\ttrack VST_Values_54Dogs_NoMxb_black\n')
		trackFile.write('\tparent VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_black.bw\n' % out)
		trackFile.write('\tshortLabel VST_Values_black\n')
		trackFile.write('\tlongLabel VST_Values_54Dogs_NoMxb_black\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 0,0,0\n\n')
	
		trackFile.write('\ttrack VST_Values_54Dogs_NoMxb_green\n')
		trackFile.write('\tparent VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_green.bw\n' % out)
		trackFile.write('\tshortLabel VST_Values_green\n')
		trackFile.write('\tlongLabel VST_Values_54Dogs_NoMxb_green\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 17,151,17\n\n')
			
		trackFile.write('\ttrack VST_Values_54Dogs_NoMxb_red\n')
		trackFile.write('\tparent VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_red.bw\n' % out)
		trackFile.write('\tshortLabel VST_Values_red\n')
		trackFile.write('\tlongLabel VST_Values_54Dogs_NoMxb_red\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 250,0,0\n\n')

	if 'F' in options.raw: #If these are Z-transformed
		trackFile.write('track Z_VST_Values_54Dogs_NoMxb\n')
		trackFile.write('type bigWig\n')
		trackFile.write('container multiWig\n')
		trackFile.write('shortLabel Z_VST_Values\n')
		trackFile.write('longLabel Z_VST_Values_54Dogs_NoMxb\n')
		trackFile.write('aggregate transparentOverlay\n')
		trackFile.write('showSubtrackColoronUi on\n')
		trackFile.write('maxHeightPixels 500:100:8\n')
		trackFile.write('browser full all\n')
		trackFile.write('viewLimits -0.1:1\n')
		trackFile.write('yLineMark 0.0\n')
		trackFile.write('yLineOnOff on\n\n')

		trackFile.write('\ttrack Z_VST_Values_54Dogs_NoMxb_grey\n')
		trackFile.write('\tparent Z_VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_grey.bw\n' % out)
		trackFile.write('\tshortLabel Z_VST_Values_grey\n')
		trackFile.write('\tlongLabel Z_VST_Values_54Dogs_NoMxb_grey\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 142,142,142\n\n')
	
		trackFile.write('\ttrack Z_VST_Values_54Dogs_NoMxb_black\n')
		trackFile.write('\tparent Z_VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_black.bw\n' % out)
		trackFile.write('\tshortLabel Z_VST_Values_black\n')
		trackFile.write('\tlongLabel Z_VST_Values_54Dogs_NoMxb_black\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 0,0,0\n\n')
	
		trackFile.write('\ttrack Z_VST_Values_54Dogs_NoMxb_green\n')
		trackFile.write('\tparent Z_VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_green.bw\n' % out)
		trackFile.write('\tshortLabel Z_VST_Values_green\n')
		trackFile.write('\tlongLabel Z_VST_Values_54Dogs_NoMxb_green\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 17,151,17\n\n')
		
		trackFile.write('\ttrack Z_VST_Values_54Dogs_NoMxb_red\n')
		trackFile.write('\tparent Z_VST_Values_54Dogs_NoMxb\n')
		trackFile.write('\ttype bigWig\n')
		trackFile.write('\tbigDataUrl %s_red.bw\n' % out)
		trackFile.write('\tshortLabel Z_VST_Values_red\n')
		trackFile.write('\tlongLabel Z_VST_Values_54Dogs_NoMxb_red\n')
		trackFile.write('\tgraphTypeDefault bar\n')
		trackFile.write('\tyLineOnOff on\n')
		trackFile.write('\tyLineMark 0.0\n')
		trackFile.write('\tcolor 250,0,0\n\n')	
		
#def make_track_file_PerSite(line):
############################################################################

print 'Reading in coordinates for track writing from file: ', options.infile
inFile = open(options.infile, 'r')

"""
#KEY
#These are the cut offs for coloring:
#Coloring by standard deviations(Z-scores)
<3 Z or <0.5 Vst = grey (142,142,142)
3-5 Z or 0.5-0.75 Vst = black (0,0,0)
>=5 Z or >0.75 = green 17,151,17
"""

#Defining outfiles
out = options.out
outGreyFile = open(out + '_grey.bedGraph', 'w')
outBlackFile = open(out + '_black.bedGraph', 'w')
outGreenFile = open(out + '_green.bedGraph', 'w')
outRedFile = open(out + '_red.bedGraph', 'w')

#Outfile for only significant hits
outFile = open(out + '_Filtered_SignificantHitsOnly.txt', 'w')
nonSigFile = open(out + '_Filtered_NONSignificantHitsOnly.txt', 'w')

#####Calculating the 95th percentile
auto_vList = [] #for raw Vst values on the autosomes and XPar
auto_zList = [] #for Z-transformed Vst values on the autosomes and XPar

xNonPar_vList = [] #for raw Vst values on the XNonPar
xNonPar_zList = [] #for Z-transformed Vst values on the XNonPar

xparMax = 6650000
xcount = 0
autocount = 0

for line in inFile:
	line = line.rstrip()
	line = line.split()
	if 'CHROM' in line[0]: #skips header
		continue
	if 'chrUn' in line[0]: #Ignore calls on chrUn
		continue
	if 'ovel' in line[0]: #Ignore calls on chrNovel
		continue
	chrom = line[0]
	start = int(line[1])
	vst = float(line[3])
	Z = float(line[4])
	
	if 'chrX' in chrom:
		if int(start) < int(xparMax): #then this should be treated as autosome
			xcount += 1
			auto_vList.append(vst)
			auto_zList.append(Z)
		else:
			xNonPar_vList.append(vst)
			xNonPar_zList.append(Z)
	else:		
		autocount += 1
		auto_vList.append(vst)
		auto_zList.append(Z)
inFile.close()

#calculating 90th & 95th percentile for autosome+chrXPar lists:
auto_90p_v = float(np.percentile(auto_vList, 90))
auto_90p_z = float(np.percentile(auto_zList, 90))
auto_95p_v = float(np.percentile(auto_vList, 95))
auto_95p_z = float(np.percentile(auto_zList, 95))
auto_99p_v = float(np.percentile(auto_vList, 99))
auto_99p_z = float(np.percentile(auto_zList, 99))
auto_995p_v = float(np.percentile(auto_vList, 99.5))
auto_995p_z = float(np.percentile(auto_zList, 99.5))
#calculating 90th & 95th percentile for XNonPar lists:
x_90p_v = float(np.percentile(xNonPar_vList, 90))
x_90p_z = float(np.percentile(xNonPar_zList, 90))
x_95p_v = float(np.percentile(xNonPar_vList, 95))
x_95p_z = float(np.percentile(xNonPar_zList, 95))
x_99p_v = float(np.percentile(xNonPar_vList, 99))
x_99p_z = float(np.percentile(xNonPar_zList, 99))
x_995p_v = float(np.percentile(xNonPar_vList, 99.5))
x_995p_z = float(np.percentile(xNonPar_zList, 99.5))
print 'auto count: ', autocount
print 'x count: ', xcount

#Autosomes + XPar
print '\nData for %i calls on autosomes + chrX-Par' % len(auto_vList)
print '90th percentile for autosomes - raw Vst: ', auto_90p_v
print '90th percentile for autosomes - Z-transformed Vst: ', auto_90p_z
print '95th percentile for autosomes - raw Vst: ', auto_95p_v
print '95th percentile for autosomes - Z-transformed Vst: ', auto_95p_z
print '99th percentile for autosomes - raw Vst: ', auto_99p_v
print '99th percentile for autosomes - Z-transformed Vst: ', auto_99p_z
print '99.5th percentile for autosomes - raw Vst: ', auto_995p_v
print '99.5th percentile for autosomes - Z-transformed Vst: ', auto_995p_z
#XNonPar
print '\nData for %i calls on chrX-NonPar' % len(xNonPar_vList)
print '90th percentile for X-NonPar - raw Vst: ', x_90p_v
print '90th percentile for X-NonPar - Z-transformed Vst: ', x_90p_z
print '95th percentile for X-NonPar - raw Vst: ', x_95p_v
print '95th percentile for X-NonPar - Z-transformed Vst: ', x_95p_z
print '99th percentile for X-NonPar - raw Vst: ', x_99p_v
print '99th percentile for X-NonPar - Z-transformed Vst: ', x_99p_z
print '99.5th percentile for X-NonPar - raw Vst: ', x_995p_v
print '99.5th percentile for X-NonPar - Z-transformed Vst: ', x_995p_z
#Finding if this is a window or per site type of analysis
raw = str(options.raw)

count = 0 
inFile = open(options.infile, 'r')

#For keeping track of counts of calls in each cutoff bracket
greyCount = 0 #lowest
blackCount = 0 #medium (90th-95th) 
greenCount = 0 #next highest (95-99th)
redCount = 0 #highest (>99.5th)

for line in inFile:
	line = line.rstrip()
	line = line.split()
	if 'CHROM' in line[0] or 'chrUn' in line[0] or 'Novel' in line[0]: #skips header and ignore calls on chrUn
		continue
	count += 1	
	chrom = line[0]
	#If results are raw (not Z-transformed)
	if 'True' in raw or 'T' in raw:
		window_start = int(line[1]) - 1
		window_end = int(line[2])
		fst = float(line[3]) #Zscore of Fst is in 10th column for sliding window outputs
		
		#coordinates do not overlap, so we dont have to calculate the midpoint for these. 
		start = line[1]
		end= line[2]
		#Total bedGraph written below:
		#outFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
		
		#If chrX Non-PAR
		if 'chrX' in chrom and int(start) > int(xparMax):
			#Conditional coloring based on Z-transformed Vst values
			if fst < x_95p_v:
				greyCount += 1
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outGreyFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= x_95p_v and fst < x_99p_v:
				blackCount += 1
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outBlackFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= x_99p_v and fst < x_995p_v:
				greenCount += 1
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outGreenFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))				
			if fst >= x_995p_v:
				redCount += 1
				outRedFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))

		#If autosome or chrX PAR
		else: 
			#Conditional coloring based on Z-transformed Vst values
			if fst < auto_95p_v:
				greyCount += 1
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outGreyFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= auto_95p_v and fst < auto_99p_v:
				blackCount += 1
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outBlackFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= auto_99p_v and fst < auto_995p_v:
				greenCount += 1
				outGreenFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= auto_995p_v:
				redCount += 1
				outRedFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
	
	#If results have been Z-transformed			
	if 'F' in raw or 'False' in raw:
		#Coordinates are non-overlapping so they will work
		start = int(line[1])
		end = int(line[2])
		#The Z-transformed Vst value is in the fifth column:
		fst = float(line[4])
		
		#Write out information to total bedGraph
		#outFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
		#If chrX Non-PAR
		if 'chrX' in chrom and int(start) > int(xparMax):
			#Conditional coloring based on Z-transformed Vst values
			if fst < x_95p_z:
				greyCount += 1
				outGreyFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= x_95p_z and fst < x_99p_z:
				blackCount += 1
				outBlackFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= x_99p_z and fst < x_995p_z:
				greenCount += 1
				outGreenFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= x_995p_z:
				redCount+= 1
				outRedFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))

		#If autosome or chrX PAR
		else: 
			#Conditional coloring based on Z-transformed Vst values
			if fst < auto_95p_z:
				greyCount += 1
				outGreyFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= auto_95p_z and fst < auto_99p_z:
				blackCount += 1
				outBlackFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= auto_99p_z and fst < auto_995p_z:
				greenCount += 1
				outGreenFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				nonSigFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
			if fst >= auto_995p_z:
				redCount += 1
				outRedFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))
				outFile.write('%s\t%s\t%s\t%f\n' % (chrom,start,end,fst))

	#For testing only
	#if count > 40:
	#	break

outGreyFile.close
outBlackFile.close
outGreenFile.close
outRedFile.close

print '\nCount Totals'
print 'Placed %i calls in the lowest threshold (<95th percentile)' % greyCount
print 'Placed %i calls in the medium threshold (95th-99th percentile)' % blackCount
print 'Placed %i calls in the highest threshold (99th-99.5th percentile)' % greenCount
print 'Placed %i calls in the highest threshold (>99.5th percentile)' % redCount



##########################################
#Generating BedGraphs
print '\nGenerating bedGraphs'
#Providing chromosome size file for generating bed graphs
chromSizesFile = '/home/jmkidd/kidd-lab-scratch/www/track-hub/canFam3/canFam3.1-browser-chrom-sizes.fai'

#PARENT TRACK
print '\nParent Track...'
bfile = out + '.bedGraph'
cmd = 'bedGraphToBigWig %s %s %s.bw' % (bfile, chromSizesFile, out)
print cmd
#genutils.runCMD(cmd)

#GREY
print '\nGrey...'
bfile = out + '_grey.bedGraph'
cmd = 'bedGraphToBigWig %s %s %s_grey.bw' % (bfile, chromSizesFile, out)
print cmd
#genutils.runCMD(cmd)

#BLACK
print '\nBlack...'
bfile = out + '_black.bedGraph'
cmd = 'bedGraphToBigWig %s %s %s_black.bw' % (bfile, chromSizesFile, out)
print cmd
#genutils.runCMD(cmd)

#BLACK
print '\nGreen...'
bfile = out + '_green.bedGraph'
cmd = 'bedGraphToBigWig %s %s %s_green.bw' % (bfile, chromSizesFile, out)
print cmd
#genutils.runCMD(cmd)

#RED
print '\nRed...'
bfile = out + '_red.bedGraph'
cmd = 'bedGraphToBigWig %s %s %s_red.bw' % (bfile, chromSizesFile, out)
print cmd
#genutils.runCMD(cmd)

print '\nDone generating bedgraphs!\n\n'

			
make_track_file_perWindow(line)		

#cmd = 'bedGraphToBigWig tmp.grey.bedGraph %s %s%s_grey.bw' % (chromSizesFile, trackDirectory, sample)

	
	





